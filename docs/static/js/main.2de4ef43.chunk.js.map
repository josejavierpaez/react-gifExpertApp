{"version":3,"sources":["components/AddCategory.tsx","components/GifGridItem/GifGridItem.tsx","helpers/getGif.ts","components/GifGrid/GifGrid.tsx","hooks/useFecthGifs.ts","views/GifExpertApp.tsx","reportWebVitals.ts","index.tsx"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","required","GifGridItem","id","title","url","className","src","alt","getGif","a","category","encodeURI","fetch","response","json","data","gifs","map","gif","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","classTitles","Math","floor","random","img","GifExpertApp","categories","setcategories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"2MAMaA,EAAc,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,cAA4B,EAEpBC,mBAAS,IAFW,mBAEjDC,EAFiD,KAErCC,EAFqC,KAexD,OACE,mCACE,sBAAMC,SATW,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAqBP,GAArB,mBAAoCO,OAClDN,EAAc,MAKd,SACE,uBACEO,KAAK,OACLC,MAAOT,EACPU,SAjBkB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,QAiBjBG,UAAU,S,QC1BPC,EAAc,SAAC,GAA0C,EAAxCC,GAAyC,IAArCC,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,IAEvC,OACE,sBAAKC,UAAU,wCAAf,UACE,qBAAKC,IAAKF,EAAKG,IAAI,WACnB,4BAAIJ,Q,uBCLGK,EAAM,uCAAG,uCAAAC,EAAA,6DAASC,EAAT,EAASA,SACvBN,EADc,iDACkCO,UAAUD,GAD5C,+DAEaE,MAAMR,GAFnB,cAEdS,EAFc,gBAGGA,EAASC,OAHZ,uBAGZC,EAHY,EAGZA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAwB,IAAD,EAO5C,MALmB,CACjBhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QAVlB,kBAcbY,GAda,4CAAH,sDCGNK,EAAU,SAAC,GAA6B,IAA3BX,EAA0B,EAA1BA,SAA0B,ECDxB,SAAC,GAA6B,IAA3BA,EAA0B,EAA1BA,SAA0B,EAC7BvB,mBAAS,CACjC4B,KAAM,GACNO,SAAS,IAH4C,mBAChDC,EADgD,KACzCC,EADyC,KAavD,OAPAC,qBAAU,WACRjB,EAAO,CAAEE,aACNgB,MAAK,SAACC,GAAD,OAAUH,EAAS,CACvBT,KAAMY,EACNL,SAAS,SAEZ,CAACZ,IACGa,EDV0BK,CAAa,CAAElB,aAAnCS,EAFqC,EAE1CJ,KAAaO,EAF6B,EAE7BA,QAEfO,EAAwB,CAAC,sBAAuB,uBAAwB,wBAAyB,sBAAuB,wBAAyB,qBAAqB,yBAE5K,OACE,qCACE,oBAAIxB,UAAWwB,EAAYC,KAAKC,MAAMD,KAAKE,SAAWH,EAAYnC,SAAlE,SAA6EgB,IAC5EY,GAAW,2CACZ,qBAAKjB,UAAU,YAAf,SAEIc,EAAOF,KAAI,SAACgB,GAAD,OACT,cAAC,EAAD,eAEMA,GADCA,EAAI/B,aEhBVgC,EAAe,WAAO,IAAD,EAII/C,mBAAS,CAAC,cAJd,mBAIzBgD,EAJyB,KAIbC,EAJa,KAUhC,OACE,qCACE,8CACA,cAAC,EAAD,CAAalD,cAAekD,IAC5B,uBAEA,6BAEID,EAAWlB,KAAI,SAAAP,GACb,OACE,cAAC,EAAD,CAEEA,SAAUA,GADLA,YCVN2B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.2de4ef43.chunk.js","sourcesContent":["import React, { useState } from 'react'\n\ninterface Props {\n  setCategories: Function;\n}\n\nexport const AddCategory = ({ setCategories, }: Props) => {\n\n  const [inputValue, setInputValue] = useState('');\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setInputValue(e.target.value);\n  }\n\n  const handleSubmit = (e: React.ChangeEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (inputValue.trim().length > 2) {\n      setCategories((cats: string[]) => [inputValue, ...cats]);\n      setInputValue('');\n    }\n  }\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          value={inputValue}\n          onChange={handleInputChange}\n          required={true}\n        />\n      </form>\n    </>\n  )\n}\n","import React from 'react'\nimport { IGifGridItemProps } from '../../interfaces/interfaces'\nexport const GifGridItem = ({ id, title, url }: IGifGridItemProps) => {\n\n  return (\n    <div className=\"card animate__animated animate__pulse\">\n      <img src={url} alt=\"imagen\" />\n      <p>{title}</p>\n    </div>\n  )\n}\n","import { IGiftResponse, ICategory } from '../interfaces/interfaces';\n\nexport const getGif = async ({ category }: ICategory) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=OPTnD34laEOU4ABpZuKqX74bg1tkJQ4y`;\n  const response: Response = await fetch(url);\n  const { data } = await response.json();\n\n  const gifs = data.map((gif: IGiftResponse) => {\n\n    const giftFilter = {\n      id: gif.id,\n      title: gif.title,\n      url: gif.images?.downsized_medium.url\n    }\n    return giftFilter;\n  });\n  return gifs;\n}","import React from 'react'\nimport { ICategory, IGift } from '../../interfaces/interfaces';\nimport { GifGridItem } from '../GifGridItem/GifGridItem';\nimport { useFetchGifs } from '../../hooks/useFecthGifs';\n\nexport const GifGrid = ({ category }: ICategory) => {\n\n  const { data:images, loading } = useFetchGifs({ category })\n\n  const classTitles: string[] = ['category-title-blue', 'category-title-green', 'category-title-orange', 'category-title-pink', 'category-title-purple', 'category-title-red','category-title-yellow'];\n\n  return (\n    <>\n      <h3 className={classTitles[Math.floor(Math.random() * classTitles.length)]}>{category}</h3>\n      {loading && <p>Loading...</p>}\n      <div className=\"card-grid\">\n        {\n          images.map((img: IGift) => (\n            <GifGridItem\n              key={img.id}\n              {...img}\n            />\n          ))\n        }\n      </div>\n    </>\n  )\n}\n","import { useState, useEffect } from 'react';\nimport { getGif } from '../helpers/getGif';\nimport { ICategory } from '../interfaces/interfaces'\n\nexport const useFetchGifs = ({ category }: ICategory) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true\n  })\n\n  useEffect(() => {\n    getGif({ category })\n      .then((imgs) => setState({\n        data: imgs,\n        loading: false\n      }))\n  }, [category]);\n  return state;\n}","import React, { useState } from 'react'\nimport { AddCategory } from '../components/AddCategory'\nimport { GifGrid } from '../components/GifGrid/GifGrid';\nexport const GifExpertApp = () => {\n\n\n\n  const [categories, setcategories] = useState(['One Punch'])\n\n\n  // const handleAdd = (newCategory: string) => {\n  //   setcategories(cats => [...cats, newCategory]);\n  // }\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={setcategories} />\n      <hr />\n\n      <ol>\n        {\n          categories.map(category => {\n            return (\n              <GifGrid\n                key={category}\n                category={category}\n              />\n            )\n          })\n        }\n      </ol>\n    </>\n  );\n}\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { GifExpertApp } from './views/GifExpertApp';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}